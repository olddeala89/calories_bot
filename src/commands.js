import Database from './database.js';

class CommandHandler {
  constructor(bot) {
    this.bot = bot;
    this.db = new Database();
    this.userStates = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;

    await this.db.createUser(chatId, username, firstName);

    const welcomeMessage = `
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä–∏–π!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add [–∫–∞–ª–æ—Ä–∏–∏] - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/goal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å
/today - –ö–∞–ª–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /goal
    `;

    await this.bot.sendMessage(chatId, welcomeMessage);
  }

  async handleAdd(msg) {
    const chatId = msg.chat.id;
    const text = msg.text.trim();
    
    // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add 350 –∑–∞–≤—Ç—Ä–∞–∫ –æ–º–ª–µ—Ç
    const parts = text.split(' ').slice(1); // —É–±–∏—Ä–∞–µ–º /add
    
    if (parts.length === 0) {
      await this.bot.sendMessage(chatId, 
        'üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:\n/add 350\n/add 350 –∑–∞–≤—Ç—Ä–∞–∫\n/add 350 –∑–∞–≤—Ç—Ä–∞–∫ –æ–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º'
      );
      return;
    }

    const calories = parseInt(parts[0]);
    if (isNaN(calories) || calories <= 0) {
      await this.bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
      return;
    }

    const mealType = parts[1] || '–æ–±—â–µ–µ';
    const description = parts.slice(2).join(' ') || null;

    await this.db.createUser(chatId); // —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const success = await this.db.addCalorieEntry(chatId, calories, mealType, description);

    if (success) {
      const todayTotal = await this.db.getTodayCalories(chatId);
      const user = await this.db.getUser(chatId);
      
      let progressText = '';
      if (user) {
        const goalPercent = Math.round((todayTotal / user.daily_goal) * 100);
        const limitPercent = Math.round((todayTotal / user.daily_limit) * 100);
        
        progressText = `\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n`;
        progressText += `–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: ${todayTotal} –∫–∫–∞–ª\n`;
        progressText += `–¶–µ–ª—å: ${user.daily_goal} –∫–∫–∞–ª (${goalPercent}%)\n`;
        
        if (user.goal_type === 'lose') {
          progressText += `–õ–∏–º–∏—Ç: ${user.daily_limit} –∫–∫–∞–ª (${limitPercent}%)`;
          
          if (limitPercent >= 90) {
            progressText += '\n‚ö†Ô∏è –í—ã –±–ª–∏–∑–∫–∏ –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É!';
          } else if (limitPercent >= 75) {
            progressText += '\nüî∂ –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ª–∏–º–∏—Ç—É –∫–∞–ª–æ—Ä–∏–π';
          }
        }
      }

      let responseMessage = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${calories} –∫–∫–∞–ª`;
      if (mealType !== '–æ–±—â–µ–µ') responseMessage += ` (${mealType})`;
      if (description) responseMessage += `\nüìù ${description}`;
      responseMessage += progressText;

      await this.bot.sendMessage(chatId, responseMessage);
    } else {
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    }
  }

  async handleGoal(msg) {
    const chatId = msg.chat.id;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üî∫ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', callback_data: 'goal_gain' },
            { text: 'üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ', callback_data: 'goal_lose' }
          ],
          [
            { text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', callback_data: 'goal_maintain' }
          ]
        ]
      }
    };

    await this.bot.sendMessage(chatId, 
      'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', 
      keyboard
    );
  }

  async handleGoalCallback(query) {
    const chatId = query.message.chat.id;
    const goalType = query.data.replace('goal_', '');
    
    this.userStates.set(chatId, { 
      action: 'setting_goal', 
      goalType: goalType 
    });

    let goalText = '';
    let recommendedCalories = 2000;

    switch (goalType) {
      case 'gain':
        goalText = 'üî∫ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã';
        recommendedCalories = 2500;
        break;
      case 'lose':
        goalText = 'üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ';
        recommendedCalories = 1800;
        break;
      case 'maintain':
        goalText = '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞';
        recommendedCalories = 2000;
        break;
    }

    await this.bot.editMessageText(
      `${goalText}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${recommendedCalories} –∫–∫–∞–ª):`,
      {
        chat_id: chatId,
        message_id: query.message.message_id
      }
    );
  }

  async handleGoalInput(msg) {
    const chatId = msg.chat.id;
    const state = this.userStates.get(chatId);
    
    if (!state || state.action !== 'setting_goal') {
      return false; // –Ω–µ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    const calories = parseInt(msg.text);
    if (isNaN(calories) || calories < 800 || calories > 5000) {
      await this.bot.sendMessage(chatId, 
        '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–æ—Ç 800 –¥–æ 5000)'
      );
      return true;
    }

    await this.db.createUser(chatId);
    const success = await this.db.updateUserGoal(chatId, state.goalType, calories);
    
    if (success) {
      let responseText = '‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n';
      
      switch (state.goalType) {
        case 'gain':
          responseText += `üî∫ –¶–µ–ª—å: ${calories} –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã`;
          break;
        case 'lose':
          const limit = Math.round(calories * 1.1);
          responseText += `üîª –¶–µ–ª—å: ${calories} –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è\n`;
          responseText += `‚ö†Ô∏è –õ–∏–º–∏—Ç: ${limit} –∫–∫–∞–ª/–¥–µ–Ω—å (–±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)`;
          break;
        case 'maintain':
          responseText += `‚öñÔ∏è –¶–µ–ª—å: ${calories} –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞`;
          break;
      }

      responseText += '\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /add';
      
      await this.bot.sendMessage(chatId, responseText);
    } else {
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏');
    }

    this.userStates.delete(chatId);
    return true;
  }

  async handleStats(msg) {
    const chatId = msg.chat.id;
    
    const user = await this.db.getUser(chatId);
    if (!user) {
      await this.bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /goal');
      return;
    }

    const todayTotal = await this.db.getTodayCalories(chatId);
    const weekStats = await this.db.getWeeklyStats(chatId);
    
    let statsText = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
    
    // –¶–µ–ª—å
    let goalEmoji = '';
    switch (user.goal_type) {
      case 'gain': goalEmoji = 'üî∫'; break;
      case 'lose': goalEmoji = 'üîª'; break;
      case 'maintain': goalEmoji = '‚öñÔ∏è'; break;
    }
    
    statsText += `${goalEmoji} –¶–µ–ª—å: ${user.daily_goal} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
    if (user.goal_type === 'lose') {
      statsText += `‚ö†Ô∏è –õ–∏–º–∏—Ç: ${user.daily_limit} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
    }
    
    // –°–µ–≥–æ–¥–Ω—è
    const goalPercent = Math.round((todayTotal / user.daily_goal) * 100);
    statsText += `\nüìÖ –°–µ–≥–æ–¥–Ω—è: ${todayTotal} –∫–∫–∞–ª (${goalPercent}%)\n`;
    
    if (user.goal_type === 'lose') {
      const limitPercent = Math.round((todayTotal / user.daily_limit) * 100);
      statsText += `–õ–∏–º–∏—Ç: ${limitPercent}%\n`;
    }

    // –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (weekStats.length > 0) {
      statsText += `\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n`;
      const weekTotal = weekStats.reduce((sum, day) => sum + day.daily_total, 0);
      const avgDaily = Math.round(weekTotal / weekStats.length);
      
      statsText += `–°—Ä–µ–¥–Ω–µ–µ: ${avgDaily} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
      
      weekStats.forEach(day => {
        const date = new Date(day.entry_date).toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit'
        });
        statsText += `${date}: ${day.daily_total} –∫–∫–∞–ª (${day.entries_count} –∑–∞–ø–∏—Å–µ–π)\n`;
      });
    }

    await this.bot.sendMessage(chatId, statsText);
  }

  async handleToday(msg) {
    const chatId = msg.chat.id;
    
    const entries = await this.db.getTodayEntries(chatId);
    const user = await this.db.getUser(chatId);
    
    if (entries.length === 0) {
      await this.bot.sendMessage(chatId, 'üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /add');
      return;
    }

    let todayText = 'üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';
    let totalCalories = 0;

    entries.forEach((entry, index) => {
      totalCalories += entry.calories;
      const time = entry.entry_time.substring(0, 5); // HH:MM
      
      todayText += `${index + 1}. ${entry.calories} –∫–∫–∞–ª`;
      if (entry.meal_type !== 'general') todayText += ` (${entry.meal_type})`;
      todayText += ` - ${time}`;
      if (entry.description) todayText += `\n   üìù ${entry.description}`;
      todayText += '\n\n';
    });

    todayText += `üíØ –í—Å–µ–≥–æ: ${totalCalories} –∫–∫–∞–ª`;
    
    if (user) {
      const goalPercent = Math.round((totalCalories / user.daily_goal) * 100);
      todayText += `\nüéØ –¶–µ–ª—å: ${user.daily_goal} –∫–∫–∞–ª (${goalPercent}%)`;
    }

    await this.bot.sendMessage(chatId, todayText);
  }

  async handleWeek(msg) {
    const chatId = msg.chat.id;
    
    const weekStats = await this.db.getWeeklyStats(chatId);
    
    if (weekStats.length === 0) {
      await this.bot.sendMessage(chatId, 'üìà –ó–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç');
      return;
    }

    let weekText = 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n';
    
    const weekTotal = weekStats.reduce((sum, day) => sum + day.daily_total, 0);
    const avgDaily = Math.round(weekTotal / weekStats.length);
    
    weekText += `–°—Ä–µ–¥–Ω–µ–µ: ${avgDaily} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
    weekText += `–û–±—â–µ–µ: ${weekTotal} –∫–∫–∞–ª\n\n`;
    
    weekStats.forEach(day => {
      const date = new Date(day.entry_date);
      const dayName = date.toLocaleDateString('ru-RU', { weekday: 'short' });
      const dateStr = date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit'
      });
      
      weekText += `${dayName} ${dateStr}: ${day.daily_total} –∫–∫–∞–ª (${day.entries_count} –∑–∞–ø–∏—Å–µ–π)\n`;
    });

    await this.bot.sendMessage(chatId, weekText);
  }

  async handleDelete(msg) {
    const chatId = msg.chat.id;
    
    const deletedEntry = await this.db.deleteLastEntry(chatId);
    
    if (deletedEntry) {
      let deleteText = `‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${deletedEntry.calories} –∫–∫–∞–ª`;
      if (deletedEntry.meal_type !== 'general') {
        deleteText += ` (${deletedEntry.meal_type})`;
      }
      if (deletedEntry.description) {
        deleteText += `\nüìù ${deletedEntry.description}`;
      }
      
      const newTotal = await this.db.getTodayCalories(chatId);
      deleteText += `\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: ${newTotal} –∫–∫–∞–ª`;
      
      await this.bot.sendMessage(chatId, deleteText);
    } else {
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  async handleHelp(msg) {
    const helpText = `
ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π:
/add 350 - –¥–æ–±–∞–≤–∏—Ç—å 350 –∫–∫–∞–ª
/add 350 –∑–∞–≤—Ç—Ä–∞–∫ - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
/add 350 –∑–∞–≤—Ç—Ä–∞–∫ –æ–º–ª–µ—Ç - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:
/today - –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
/goal - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å
/delete - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å

üéØ –¢–∏–ø—ã —Ü–µ–ª–µ–π:
‚Ä¢ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã - —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ - —Å –ª–∏–º–∏—Ç–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–æ—Ä–º–∞

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è):
–ë–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É –∫–∞–ª–æ—Ä–∏–π.
    `;

    await this.bot.sendMessage(msg.chat.id, helpText);
  }
}

export default CommandHandler;

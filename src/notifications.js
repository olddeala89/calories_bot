import cron from 'node-cron';
import Database from './database.js';

class NotificationService {
  constructor(bot) {
    this.bot = bot;
    this.db = new Database();
    this.setupCronJobs();
  }

  setupCronJobs() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å —Å 18:00 –¥–æ 22:00
    cron.schedule('0 18-22 * * *', () => {
      this.checkAndSendNotifications();
    });

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ 20:00 –æ—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationHour = process.env.NOTIFICATION_HOUR || 20;
    const notificationMinute = process.env.NOTIFICATION_MINUTE || 0;
    
    cron.schedule(`${notificationMinute} ${notificationHour} * * *`, () => {
      this.sendDailyReminders();
    });

    console.log('üìÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
  }

  async checkAndSendNotifications() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const users = await this.db.getUsersNeedingNotification(0.8);
      
      for (const user of users) {
        const percentage = Math.round((user.today_calories / user.daily_limit) * 100);
        const remaining = user.daily_limit - user.today_calories;
        
        let notificationMessage = '';
        let emoji = '';
        
        if (percentage >= 95) {
          emoji = 'üö®';
          notificationMessage = `${emoji} –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n`;
        } else if (percentage >= 85) {
          emoji = '‚ö†Ô∏è';
          notificationMessage = `${emoji} –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É.\n\n`;
        } else if (percentage >= 75) {
          emoji = 'üî∂';
          notificationMessage = `${emoji} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∫–∞–ª–æ—Ä–∏–π.\n\n`;
        }
        
        notificationMessage += `üìä –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: ${user.today_calories} –∏–∑ ${user.daily_limit} –∫–∫–∞–ª (${percentage}%)\n`;
        notificationMessage += `üéØ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} –∫–∫–∞–ª\n\n`;
        
        if (percentage >= 90) {
          notificationMessage += 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.';
        } else {
          notificationMessage += 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è.';
        }

        await this.bot.sendMessage(user.chat_id, notificationMessage);
        await this.db.updateNotificationSent(user.chat_id);
        
        console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chat_id}: ${percentage}%`);
      }
      
      if (users.length > 0) {
        console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${users.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  async sendDailyReminders() {
    try {
      // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00 –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ü–µ–ª—å—é –ø–æ—Ö—É–¥–µ–Ω–∏—è
      const users = await this.db.all(`
        SELECT u.chat_id, u.daily_goal, u.daily_limit,
               COALESCE(SUM(ce.calories), 0) as today_calories
        FROM users u
        LEFT JOIN calorie_entries ce ON u.chat_id = ce.chat_id 
          AND ce.entry_date = date('now')
        JOIN notification_settings ns ON u.chat_id = ns.chat_id
        WHERE u.goal_type = 'lose' 
        AND ns.enabled = 1
        GROUP BY u.chat_id
        HAVING today_calories < (u.daily_limit * 0.7)
      `);

      for (const user of users) {
        const percentage = Math.round((user.today_calories / user.daily_goal) * 100);
        const remaining = user.daily_goal - user.today_calories;
        
        if (remaining > 200) { // –ï—Å–ª–∏ –µ—â–µ –º–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π –æ—Å—Ç–∞–ª–æ—Å—å
          const reminderMessage = `
üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!

üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${user.today_calories} –∫–∫–∞–ª (${percentage}% –æ—Ç —Ü–µ–ª–∏)
üéØ –¶–µ–ª—å: ${user.daily_goal} –∫–∫–∞–ª
üìà –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} –∫–∫–∞–ª

üí° –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞!
          `;
          
          await this.bot.sendMessage(user.chat_id, reminderMessage.trim());
        }
      }

      console.log(`üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π
  async checkImmediateNotification(chatId, newCalories) {
    try {
      const user = await this.db.getUser(chatId);
      if (!user || user.goal_type !== 'lose') return;

      const todayTotal = await this.db.getTodayCalories(chatId);
      const percentage = (todayTotal / user.daily_limit) * 100;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
      if (percentage >= 100) {
        await this.bot.sendMessage(chatId, 
          'üö® –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π!\n\n' +
          'üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.'
        );
      } else if (percentage >= 90 && (todayTotal - newCalories) / user.daily_limit < 0.9) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ 90%
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É!\n\n' +
          `–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ ${user.daily_limit - todayTotal} –∫–∫–∞–ª –¥–æ –ª–∏–º–∏—Ç–∞.`
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async testNotification(chatId) {
    try {
      const user = await this.db.getUser(chatId);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const todayTotal = await this.db.getTodayCalories(chatId);
      const percentage = Math.round((todayTotal / user.daily_limit) * 100);
      
      const testMessage = `
üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:

üìä –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: ${todayTotal} –∫–∫–∞–ª
üéØ –¶–µ–ª—å: ${user.daily_goal} –∫–∫–∞–ª  
‚ö†Ô∏è –õ–∏–º–∏—Ç: ${user.daily_limit} –∫–∫–∞–ª
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ª–∏–º–∏—Ç–∞: ${percentage}%

${percentage >= 80 ? 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã' : 'üîï –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ'}
      `;

      await this.bot.sendMessage(chatId, testMessage.trim());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    }
  }
}

export default NotificationService;
